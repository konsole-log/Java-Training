#CLASS DAY-1(6/24):
-> class name should be same as the file name
-> entry point always start as public static void main(String[] args){}
Access modifier:
    -public:
    -static: this makes method run without creating an object
    -main(): this is the name of method
*==we should use import java.util.Scanner for Scanner class==*
Scanner: used to take input from the user this is the Scanner class
-new: keyword to create new object
syntax: Scanner <scanner_name> = new Scanner(System.in);
=Tasks:
    1. odd and even
    2. 1 to 10 print
    3. fact using while loop user input

#CLASS DAY-2(6/26)
--> about OOP in java 
--> attributes and other stuffs like method and instances
--> making constructor
use of stack and heap memory to save the stuffs for the objects and class
constructor of basically two types used in Java they are:
* default constructor: where we don't pass any argument/parameter and in default cases it is 
given by java compiler.
* parameterised constructor: where we pass argument/parameters and it is user defined
example for the default constructor and parameterised constructor is given below:
class Shape{
    private int dimension;//this is called as attribute 
        Shape(){
            //this is the default constructor
        }
        Shape(int dimension){
            this.dimension=dimension
            //this is parameterised constructor
        }
}
for encapsulation we use getter and setter:
-->getter is used to access the attributes from the class
-->setter is used to set the attributes of the class

#CLASS DAY-3(6/29)
-->about static keyword where it is used
* when static is used in the variable then it needs class name to access it and has same values for the all objects of the class
* when static is used in the method then the method can only access static variable along and needs class to call it
-->about inheritance
* we use extend keyword for inheritance
* there is no concept for class multiple inheritance but we can use the interfaces and abstractions for them
--> about final keyword 
* when used in class we cannot inherit from that class
* when used in variable we cannot change its variable unless initialised from the constructor
* when used in method we can call the method but we cannot override it in child class
#TASKS#
1. create class animal and child class name wild animals and demonstrate inheritance and use of different keywords like final
and static.


#CLASS DAY-4(7/1)
-->about polymorphism:compile time and run-time polymorphism


#CLASS DAY-5(7/3)
-->about exception handling
using try and catch block
here,
Throwable --> Exception --> RuntimeException --> NullPointerException
above shows the multilevel inheritance.
