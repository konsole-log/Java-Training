#CLASS DAY-1(6/24):
-> class name should be same as the file name
-> entry point always start as public static void main(String[] args){}
Access modifier:
    -public:
    -static: this makes method run without creating an object
    -main(): this is the name of method
*==we should use import java.util.Scanner for Scanner class==*
Scanner: used to take input from the user this is the Scanner class
-new: keyword to create new object
syntax: Scanner <scanner_name> = new Scanner(System.in);
=Tasks:
    1. odd and even
    2. 1 to 10 print
    3. fact using while loop user input

#CLASS DAY-2(6/26)
--> about OOP in java 
--> attributes and other stuffs like method and instances
--> making constructor
use of stack and heap memory to save the stuffs for the objects and class
constructor of basically two types used in Java they are:
* default constructor: where we don't pass any argument/parameter and in default cases it is 
given by java compiler.
* parameterised constructor: where we pass argument/parameters and it is user defined
example for the default constructor and parameterised constructor is given below:
class Shape{
    private int dimension;//this is called as attribute 
        Shape(){
            //this is the default constructor
        }
        Shape(int dimension){
            this.dimension=dimension
            //this is parameterised constructor
        }
}
for encapsulation we use getter and setter:
-->getter is used to access the attributes from the class
-->setter is used to set the attributes of the class

#CLASS DAY-3(6/29)
-->about static keyword where it is used
* when static is used in the variable then it needs class name to access it and has same values for the all objects of the class
* when static is used in the method then the method can only access static variable along and needs class to call it
-->about inheritance
* we use extend keyword for inheritance
* there is no concept for class multiple inheritance but we can use the interfaces and abstractions for them
--> about final keyword 
* when used in class we cannot inherit from that class
* when used in variable we cannot change its variable unless initialised from the constructor
* when used in method we can call the method but we cannot override it in child class
#TASKS#
1. create class animal and child class name wild animals and demonstrate inheritance and use of different keywords like final
and static.

#CLASS DAY-4(7/1)
-->about polymorphism:compile time and run-time polymorphism

#CLASS DAY-5(7/3)
-->about exception handling
using try and catch block
here,
Throwable --> Exception --> RuntimeException --> NullPointerException
above shows the multilevel inheritance.
* try block tries until first exception is met then it searches for correct catch block for that exception and goes
out of the try block*

#CLASS DAY-6(7/6)
-->more about try catch block with finally block
even when there is no exception try block is executed due to finally block.
-->about throw keyword which helps us to throw exception but we need try-catch block to handle it.
-->about throws keyword which is used to define where method gives exception or not and which
type of exception it gives
example:
    public static void validateAge(int age) throws Exception, IllegalArgumentException{
        if(age<=18){
            //==> compile time exception: throw new IllegalArgumentException("Age is not valid");//exception created
            throw new  Exception("Age is not valid");//compile time exception
        }
        if(age>18){
            throw new IllegalArgumentException("Age is greater);
        }
        System.out.println("age is valid");
    }
--The above method throws exception and it must be handled--
* Exception propagation *
Exception is propagated to the caller function.
* Custom exception *
we can make custom exception by inheriting either RuntimeException or Exception(for compile time)
task:
1.to create class that takes user input about fname and lname
and fname and lname should be characters so should be handled using custom exception.
2. and age should be only number and handled using custom exception.

#CLASS DAY-7(7/8)
-->about collection framework
    ->list,set,map
    ->primitive and non-primitive data tyoe//wrapper class
    ->int,Integer are different: int is primitive data type and Integer is non-primitive data type
    ->double, Double are different:same as int
1. LIST:
   Syntax:
   List<Integer> this is from java.util.List
   List<datatype> list_name = new ArrayList<>();
   List<datatype> llist_name= new LinkedList<>();
   Methods:
    -> list_name.add(data):= to add data in the list_name
    -> list_name.size():= to return the size of list_name
    -> list_name.get(i):=to return the data at index 'i' of list_nam
    -> list_name.set(i,d):= used to update data in index 'i' with new_data 'd'
    -> list_name.indexof(d):= returns the index of first occurence of data 'd' in list_name
    -> list_name.remove(i):= to remove data at index 'i' we can also remove using object 
   Traversing list we can use:
    * basic for loop
    --Example--
    for(int i=0;i<list_name.size();i++){
        System.out.println(list_name.get(i));
    }
    * enchanced for loop
    --Example--
    for(datatype n: list_name){
        System.out.println(n);
    }
    * using Iterator
    --Example--
    Iterator<datatype> iterators=list_name.iterator();
    while(iterators.hasNext()){
        System.out.println(iterators.next());
    }
2. SET:
   -> no index and stores uniquely and there is no duplicates
   ->subclasses of SET: set,hashset,linkedhashset,treeset
   Syntax:
   Set<datatype> set_name=new HashSet<>();

   Methods:
    -> set_name.add(data):=to add data to the set
    -> set_name.remove(object):= since there is no index then we have to remove by making object
   Traversing we can only use enhanced for loop

3. MAP:
   -> this is <key,value> 
   -> hashmap,linkedhashmap,treemap
   Syntax:
   -> Map<keyDataType, valueDataType> map_name=new HashMap<>()
   Methods:
    -> map_name.put(k,v):=to put value 'v' in key 'k'
    -> map_name.get(k):= to return the value at key 'k'
    -> map_name.remove(k):= to remove value at key 'k'
    -> m.getKey():= to get key of value m in Map
    -> m.getValue():=to get value of m in Map
    -> map_name.keySet():= returns the set of key
    -> map_name.values():=returns the set of values
   Traversing MAP:
   for(Map.Entry<keyDatatype,valueDatatype> m: hashMap.entrySet()){}

#CLASS DAY-8(7/10)
request from client->application program(JAVA)-> database
# One class represent the attributes of database table
# One object represent the tuple for database table
1. UI
2. Validation
-> about DAO pattern: D-Data, A-Access, O-Object

[M-Model,V-view,C-control,request and response]==> service layer ==calls DA0==> DA0(database)
Service layer divided into:
-> Business logic: Independent of Service logic and database
-> Service logic: tie up with database



